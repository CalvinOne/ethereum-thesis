contract owned
{
	address public owner;

	function owned() {
		owner = msg.sender;
	}

	modifier onlyOwner {
		if (msg.sender != owner) throw;
	}

	function transferOwnership(address newOwner) onlyOwner {
		owner = newOwner;
	}
}

contract MyToken is owned
{
	/* Variables */
	mapping (address => uint256) public balanceOf;
	string 	public	name;
	string 	public	symbol;
	uint8 	public	decimals;
	uint256	public	totalSupply;
	uint256	public	sellPrice;
	uint256 public	buyPrice;

	/* Mappings */
	mapping (address => bool) public frozenAccount;

	/* Events */
	event FrozenFunds(address target, bool frozen);
	event Transfer(address indexed from, address indexed target, uint256 amount);

	/* Initializes contract with initial supply tokens to the creator of the contract */
	function MyToken(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits)
	{
		balanceOf[msg.sender] = initialSupply;

		name =			tokenName;			// Set the name for display purposes
		symbol =		tokenSymbol;		// Set the symbol for display purposes
		decimals =		decimalUnits;		// Amount of decimals for display purposes
		totalSupply =	initialSupply;		// Total amount of tokens in circulation
	}

	function transfer(address target, uint256 amount)
	{
		/* Don't serve frozen accounts */
		if (frozenAccount[msg.sender])
			throw;

		/* Check if sender has balance and for overflows */
		if (balanceOf[msg.sender] < amount || balanceOf[target] + amount < balanceOf[target])
			throw;

		/* Add and subtract new balances */
		balanceOf[msg.sender] -=	amount;
		balanceOf[target] +=		amount;

		/* Notify anyone listening that this transfer took place */
		Transfer(msg.sender, target, amount);
	}

	function mintToken(address target, uint256 mintedAmount) onlyOwner
	{
		balanceOf[target] +=	mintedAmount;
		totalSupply += 			mintedAmount;
		Transfer(0, owner, mintedAmount);
		Transfer(owner, target, mintedAmount);
	}

	function freezeAccount(address target, bool freeze) onlyOwner
	{
		if (target == owner)
			throw;
		frozenAccount[target] =	freeze;
		FrozenFunds(target, freeze);
	}

	function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
		sellPrice =	newSellPrice;
		buyPrice =	newBuyPrice;
	}

	function buy() returns (uint amount)
	{
		amount = msg.value / buyPrice;			// calculates the amount
		if (balanceOf[this] < amount)			// checks if it has enough to sell
			throw;
		balanceOf[msg.sender] +=	amount;		// adds the amount to buyer's balance
		balanceOf[this] -= 			amount;				// subtracts amount from seller's balance
		Transfer(this, msg.sender, amount);		// execute an event reflecting the change
		return amount;							// ends function and returns
	}

	function sell(uint amount) returns (uint revenue)
	{
		if (balanceOf[msg.sender] < amount)	// checks if the sender has enough to sell
			throw;
		balanceOf[this] += 			amount;	// adds the amount to owner's balance
		balanceOf[msg.sender] -=	amount;	// subtracts the amount from seller's balance
		revenue = amount * sellPrice;
		if (!msg.sender.send(revenue))		// sends ether to the seller: it's important
		{
			throw;							// to do this last to prevent recursion attacks
		}
		else {
			Transfer(msg.sender, this, amount); // executes an event reflecting on the change
			return revenue; // ends function and returns
		}
	}
}
